/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include "swe_keys_default.h"
#include "swe_keys_mac.h"

#define DEFAULT     0
#define GAMING      1
#define GAMING_SEC  2
#define SYMBOLS_SWE 3
#define FUNC        4
#define NUMBER      5
#define SETTINGS    6

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    cond_layers {
        compatible = "zmk,conditional-layers";
        // Define SETTINGS layer as tri-state
        func_tristate {
            if-layers = <SYMBOLS_SWE FUNC>;
            then-layer = <SETTINGS>;
        };
    };

/*           34 Keys
╭──────────────╮ ╭──────────────╮
│ 0  1  2  3  4│ │ 5  6  7  8  9│
│10 11 12 13 14│ │15 16 17 18 19│
│20 21 22 23 24│ │25 26 27 28 29│
╰────────╮30 31│ │32 33╭────────╯
         ╰─────╯ ╰─────╯       */
/*    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    }; */

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            &kp Q       &kp W       &kp F         &kp P           &kp B       &kp J                 &kp L         &kp U         &kp Y       &kp BSPC
            &hm LGUI A  &hm LALT R  &hm LSHIFT S  &hm LCTRL T     &kp G       &kp M                 &hm RCTRL N   &hm RSHIFT E  &hm RALT I  &hm RGUI O
            &kp Z       &kp X       &kp C         &kp D           &kp V       &kp K                 &kp H         &kp COMMA     &kp DOT     &kp ENTER
                                                  &lt NUMBER TAB  &kp SPACE   &lt SYMBOLS_SWE BSPC  &lt FUNC ESC
            >;
        };

        gaming_layer {
            bindings = <
            &kp N1          &kp N2  &kp N3  &kp N4     &kp N5     &kp J            &kp L        &kp U         &kp Y       &kp BSPC
            &kp LSHIFT      &kp Q   &kp W   &kp E      &kp R      &kp M            &hm RCTRL N  &hm RSHIFT E  &hm RALT I  &hm RGUI O
            &kp LCTRL       &kp A   &kp S   &kp D      &kp F      &kp M            &kp N        &kp E         &kp I       &kp O
                                            &mo GAMING_SEC &kp SPACE  &mo SYMBOLS_SWE  &mo FUNC
            >;
        };

        gaming_secondary_layer {
            bindings = <
            &kp F1   &kp F2  &kp F3  &kp F4     &kp F5     &kp J            &kp L        &kp U         &kp Y       &kp BSPC
            &kp ESC  &kp T   &kp Y   &kp U      &kp I      &kp M            &hm RCTRL N  &hm RSHIFT E  &hm RALT I  &hm RGUI O
            &kp TAB  &kp Z   &kp X   &kp C      &kp V      &kp M            &kp N        &kp E         &kp I       &kp O
                                     &trans     &kp ENTER  &mo SYMBOLS_SWE  &mo FUNC
            >;
        };

        symbols_swe_layer {
            bindings = <
            &kp SEM_DQT       &kp SEM_AT         &kp SEM_EXCL         &kp SEM_LBKT         &kp SEM_RBKT   &kp SEM_LPAR   &kp SEM_RPAR         &kp SEM_UNDER         &kp SEM_QMARK      &kp SEM_AE
            &hm LGUI SEM_SQT  &hm LALT SEM_AMPS  &hm LSHIFT SEM_STAR  &hm LCTRL SEM_GRAVE  &kp SEM_PLUS   &kp SEM_MINUS  &hm RCTRL SEM_TILDE  &hm RSHIFT SEM_EQUAL  &hm RALT SEM_PIPE  &hm RGUI SEM_AA
            &kp SEM_PRCNT     &kp SEM_HASH       &kp SEM_CARET        &kp SEM_DLLR         &kp SEM_BSLH   &kp SEM_LBRC   &kp SEM_RBRC         &kp SEM_LT            &kp SEM_GT         &kp SEM_OO
                                                                      &kp SEM_FSLH         &kp SPACE     &trans        &trans
            >;
        };

        func_layer {
            bindings = <
            &kp ESC   &kp F1  &kp F2   &kp F3   &kp F4     &kp HOME    &kp PG_UP  &kp UP      &kp PG_DN   &kp DEL
            &kp TAB   &kp F5  &kp F6   &kp F7   &kp F8     &kp END     &kp LEFT   &kp DOWN    &kp RIGHT   &kp C_VOL_UP
            &kp CAPS  &kp F9  &kp F10  &kp F11  &kp F12    &kp C_PREV  &kp C_PP   &kp C_NEXT  &kp C_MUTE  &kp C_VOL_DN
                                       &kp N3   &kp SPACE  &trans      &trans
            >;
        };

        number_layer {
            bindings = <
            &kp N1       &kp N2      &kp N3         &kp N4        &kp N5        &kp N6        &kp N7        &kp N8         &kp N9       &kp N0
            &hm LGUI  N6 &hm LALT N7 &hm LSHIFT N8  &hm LCTRL N9  &kp N0        &kp SEM_MINUS  &hm RCTRL N4  &hm RSHIFT N5  &hm RALT N6  &hm RGUI COMMA
            &trans       &trans      &trans         &trans        &kp SEM_EQUAL  &kp SEM_PLUS   &kp N1        &kp N2         &kp N3       &kp DOT
                                                    &trans        &kp SPACE     &kp BSPC      &kp N0
            >;
        };

        settings_layer {
            bindings = <
            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4   &ext_power EP_ON  &ext_power EP_OFF  &trans      &trans  &trans
            &bt BT_CLR    &trans        &trans        &trans        &trans         &to DEFAULT       &to GAMING         &to QWERTY  &trans  &trans
            &out OUT_BLE  &out OUT_USB  &trans        &trans        &bootloader    &bootloader       &trans             &trans      &trans  &trans
                                                      &trans        &trans         &trans            &trans
            >;
        };
    };
};


