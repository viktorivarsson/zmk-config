/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>
#include "swe_keys_default.h"
#include "swe_keys_mac.h"

#define DEFAULT     0
#define QWERTY      1
#define GAMING      2
#define GAMING_SEC  3
#define SYMBOLS_SWE 4
#define FUNC        5
#define NUMBER      6
#define SETTINGS    7

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    cond_layers {
        compatible = "zmk,conditional-layers";
        // Define SETTINGS layer as tri-state
        func_tristate {
            if-layers = <SYMBOLS_SWE FUNC>;
            then-layer = <SETTINGS>;
        };
    };

/*           40 Keys
╭─────────────────╮ ╭─────────────────╮
│    0  1  2  3  4│ │ 5  6  7  8  9   │
│10 11 12 13 14 15│ │16 17 18 19 20 21│
│22 23 24 25 26 27│ │28 29 30 31 32 33│
╰────────╮34 35 36│ │37 38 39╭────────╯
         ╰────────╯ ╰────────╯       */
/*    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    }; */

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                        &kp Q       &kp W         &kp F           &kp P       &kp B         &kp J                 &kp L                 &kp U           &kp Y       &kp SEM_AE
            &kp N1      &hm LGUI A  &hm LALT R    &hm LSHIFT S    &hm LCTRL T &kp G         &kp M                 &hm RCTRL N           &hm RSHIFT E    &hm RALT I  &hm RGUI O  &kp SEM_AA
            &kp N2      &kp Z       &kp X         &kp C           &kp D       &kp V         &kp K                 &kp H                 &kp COMMA       &kp DOT     &kp SEM_OO  &kp ENTER
                                                  &lt NUMBER TAB  &kp SPACE   &kp ENTER     &kp BSPC              &lt SYMBOLS_SWE BSPC  &lt FUNC ESC
            >;
        };

        qwerty_layer {
            bindings = <
                        &kp Q       &kp W         &kp E           &kp R       &kp T         &kp Y                 &kp U                 &kp I           &kp O       &kp P
            &kp N1      &hm LGUI A  &hm LALT S    &hm LSHIFT D    &hm LCTRL F &kp G         &kp H                 &hm RCTRL J           &hm RSHIFT K    &hm RALT L  &hm RGUI SEM_AE   &kp SEM_AA
            &kp N2      &kp Z       &kp X         &kp C           &kp V       &kp B         &kp N                 &kp M                 &kp COMMA       &kp DOT     &kp SEM_OO        &kp ENTER
                                                  &lt NUMBER TAB  &kp SPACE   &kp ENTER     &kp BSPC              &lt SYMBOLS_SWE BSPC  &lt FUNC ESC
            >;
        };

        gaming_layer {
            bindings = <
                        &kp N1          &kp N2          &kp N3          &kp N4            &kp N5            &kp J             &kp L             &kp U         &kp Y       &kp BSPC
            &kp ESC     &kp LSHIFT      &kp Q           &kp W           &kp E             &kp R             &kp M             &hm RCTRL N       &hm RSHIFT E  &hm RALT I  &hm RGUI O    &kp N2
            &kp LALT    &kp LCTRL       &kp A           &kp S           &kp D             &kp F             &kp M             &kp N             &kp E         &kp I       &kp O         &kp N3
                                                        &mo GAMING_SEC  &kp SPACE         &kp G             &trans            &mo SYMBOLS_SWE   &mo FUNC
            >;
        };

        gaming_secondary_layer {
            bindings = <
                        &kp F1          &kp F2          &kp F3      &kp F4            &kp F5            &kp J             &kp L             &kp U         &kp Y       &kp BSPC
            &kp TAB     &kp H           &kp T           &kp Y       &kp U             &kp I             &kp M             &hm RCTRL N       &hm RSHIFT E  &hm RALT I  &hm RGUI O    &kp N2
            &kp J       &kp K           &kp Z           &kp X       &kp C             &kp V             &kp M             &kp N             &kp E         &kp I       &kp O         &kp N3
                                                        &trans      &kp ENTER         &trans            &trans            &mo FUNC          &mo SYMBOLS_SWE
            >;
        };

        symbols_swe_layer {
            bindings = <
                      &kp SEM_DQT       &kp SEM_AT          &kp SEM_EXCL          &kp SEM_LBKT          &kp SEM_RBKT      &kp SEM_LPAR    &kp SEM_RPAR          &kp SEM_UNDER         &kp SEM_QMARK      &kp SEM_AE
            &none     &hm LGUI SEM_SQT  &hm LALT SEM_AMPS   &hm LSHIFT SEM_STAR   &hm LCTRL SEM_GRAVE   &kp SEM_PLUS      &kp SEM_MINUS   &hm RCTRL SEM_TILDE   &hm RSHIFT SEM_EQUAL  &hm RALT SEM_PIPE  &hm RGUI SEM_AA    &none
            &none     &kp SEM_PRCNT     &kp SEM_HASH        &kp SEM_CARET         &kp SEM_DLLR          &kp SEM_BSLH      &kp SEM_LBRC    &kp SEM_RBRC          &kp SEM_LT            &kp SEM_GT         &kp SEM_OO         &none
                                                            &kp SEM_FSLH          &kp SPACE             &trans            &trans          &trans                &trans
            >;
        };

        func_layer {
            bindings = <
                      &kp ESC   &kp F1  &kp F2    &kp F3     &kp F4       &kp HOME    &kp PG_UP   &kp UP      &kp PG_DN   &kp DEL
            &none     &kp TAB   &kp F5  &kp F6    &kp F7     &kp F8       &kp END     &kp LEFT    &kp DOWN    &kp RIGHT   &kp C_VOL_UP    &none
            &none     &kp CAPS  &kp F9  &kp F10   &kp F11    &kp F12      &kp C_PREV  &kp C_PP    &kp C_NEXT  &kp C_MUTE  &kp C_VOL_DN    &none
                                        &kp N3    &kp SPACE  &trans       &trans      &trans      &trans
            >;
        };

        number_layer {
            bindings = <
                        &kp N1        &kp N2      &kp N3          &kp N4        &kp N5        &kp N6        &kp N7        &kp N8         &kp N9       &kp N0
            &none       &hm LGUI  N6  &hm LALT N7 &hm LSHIFT N8   &hm LCTRL N9  &kp N0        &kp SEM_MINUS &hm RCTRL N4  &hm RSHIFT N5  &hm RALT N6  &hm RGUI COMMA   &none
            &none       &trans        &trans      &trans          &trans        &kp SEM_EQUAL &kp SEM_PLUS  &kp N1        &kp N2         &kp N3       &kp DOT   &none
                                                  &trans          &kp SPACE     &trans        &trans        &kp BSPC      &kp N0
            >;
        };

        settings_layer {
            bindings = <
                    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &ext_power EP_ON    &ext_power EP_OFF   &trans      &trans    &trans
            &none   &bt BT_CLR      &trans          &trans          &trans          &trans          &to DEFAULT         &to GAMING          &to QWERTY  &trans    &trans    &none
            &none   &out OUT_BLE    &out OUT_USB    &trans          &trans          &bootloader     &bootloader         &trans              &trans      &trans    &trans    &none
                                                    &trans          &trans          &trans          &trans              &trans              &trans
            >;
        };
    };
};

